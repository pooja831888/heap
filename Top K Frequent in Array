class Solution {
   
    public ArrayList<Integer> topKFrequent(int[] arr, int k) {
        
        HashMap<Integer, Integer> freqMap = new HashMap<>();
        for (int num : arr) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }

        // Step 2: Max Heap with custom comparator
        PriorityQueue<Map.Entry<Integer, Integer>> maxHeap = new PriorityQueue<>(
            (a, b) -> {
                if (b.getValue().equals(a.getValue())) {
                    return b.getKey() - a.getKey(); 
                }
                return b.getValue() - a.getValue();  .,
            }
        );

        maxHeap.addAll(freqMap.entrySet());

        ArrayList<Integer> result = new ArrayList<>();
        while (k-- > 0 && !maxHeap.isEmpty()) {
            result.add(maxHeap.poll().getKey());
        }

        return result;
    }
}
